// Generated by CoffeeScript 1.6.1
(function() {
  var fill_fns, from_template, template_addclass, template_append, template_fillmany, template_set_attr, template_toggle, templates, zip;

  templates = {};

  zip = function() {
    var arr, i, length, lengthArray, _i, _results;
    lengthArray = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        arr = arguments[_i];
        _results.push(arr.length);
      }
      return _results;
    }).apply(this, arguments);
    length = Math.min.apply(Math, lengthArray);
    _results = [];
    for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
      _results.push((function() {
        var _j, _len, _results1;
        _results1 = [];
        for (_j = 0, _len = arguments.length; _j < _len; _j++) {
          arr = arguments[_j];
          _results1.push(arr[i]);
        }
        return _results1;
      }).apply(this, arguments));
    }
    return _results;
  };

  template_append = function(field_elem, field_name, fill_data) {
    return field_elem.append(fill_data[field_name]);
  };

  template_set_attr = function(field_elem, field_name, fill_data) {
    return field_elem.attr(field_name, fill_data[field_name]);
  };

  template_fillmany = function(field_elem, field_name, fill_data) {
    var content, field_template, _i, _len, _ref;
    _ref = fill_data[field_name];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      content = _ref[_i];
      field_template = field_elem.clone();
      field_template.append(content);
      field_elem.before(field_template);
    }
    return field_elem.remove();
  };

  template_toggle = function(field_elem, field_name, fill_data) {
    if (!fill_data[field_name]) {
      return field_elem.remove();
    }
  };

  template_addclass = function(field_elem, field_name, fill_data) {
    return field_elem.addClass(fill_data[field_name]);
  };

  fill_fns = {
    append: template_append,
    setattr: template_set_attr,
    fillmany: template_fillmany,
    addclass: template_addclass,
    toggle: template_toggle
  };

  from_template = function(template_name, fill_data) {
    var selector, template;
    template = templates[template_name];
    if (!template) {
      throw "template " + template_name + " doesn't exist.";
    }
    template = template.clone();
    selector = $('[data-js_template_fieldname][data-js_template_fieldtype]', template);
    if (((template.attr("data-js_template_fieldname")) != null) && ((template.attr('data-js_template_fieldtype')) != null)) {
      selector = selector.addBack();
    }
    selector.each(function() {
      var action, actions, field, fn, name, names, _i, _len, _ref, _ref1, _results;
      field = $(this);
      names = field.data('js_template_fieldname').split(',');
      names = $.map(names, $.trim);
      actions = field.data('js_template_fieldtype').split(',');
      actions = $.map(actions, $.trim);
      _ref = zip(names, actions);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], name = _ref1[0], action = _ref1[1];
        fn = fill_fns[action];
        if (!fn) {
          continue;
        }
        _results.push(fn(field, name, fill_data));
      }
      return _results;
    });
    return template;
  };

  $(document).ready(function() {
    return $('.js-templates [data-js_template_name]').each(function() {
      var elem, name;
      elem = $(this);
      name = elem.data("js_template_name");
      return templates[name] = elem;
    });
  });

  window.from_template = from_template;

}).call(this);
